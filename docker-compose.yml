services:
  # ========================================
  # INFRASTRUCTURE SERVICES
  # ========================================

  redis:
    image: redis:7-alpine
    container_name: ron_redis
    command: redis-server --maxmemory 100mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    mem_limit: 128m
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: ron_postgres
    environment:
      POSTGRES_DB: ron_clanker
      POSTGRES_USER: ron
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    restart: unless-stopped
    mem_limit: 256m
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ron"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ========================================
  # LEGACY CONTAINER (for backward compatibility)
  # ========================================

  ron_clanker:
    build: .
    container_name: ron_clanker
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - DATABASE_PATH=/app/data/ron_clanker.db
      - LOG_LEVEL=INFO
      - MCP_ENABLED=false
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://ron:${DB_PASSWORD}@postgres:5432/ron_clanker
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: python -m scripts.setup_database
    restart: unless-stopped

  # ========================================
  # SCHEDULER SERVICES (Celery)
  # ========================================

  celery_worker:
    build: .
    container_name: ron_celery_worker
    command: celery -A infrastructure.celery_app worker --loglevel=info
    volumes:
      - ./:/app
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_PATH=/app/data/ron_clanker.db
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    mem_limit: 256m

  celery_beat:
    build: .
    container_name: ron_celery_beat
    command: celery -A infrastructure.celery_app beat --loglevel=info
    volumes:
      - ./:/app
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_PATH=/app/data/ron_clanker.db
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    mem_limit: 128m

  # ========================================
  # MONITORING SERVICES
  # ========================================

  decision_logger:
    build: .
    container_name: ron_decision_logger
    command: python scripts/decision_logger.py
    volumes:
      - ./:/app
      - ./logs:/app/logs
    environment:
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    mem_limit: 128m

  # ========================================
  # AGENT SERVICES (Event-Driven Architecture)
  # ========================================
  # Uncomment as agents are converted to event-driven pattern

  # agent_manager:
  #   build:
  #     context: .
  #     dockerfile: docker/Dockerfile.agent
  #   container_name: ron_manager
  #   environment:
  #     AGENT_TYPE: manager
  #     REDIS_URL: redis://redis:6379
  #     POSTGRES_URL: postgresql://ron:${DB_PASSWORD}@postgres:5432/ron_clanker
  #   depends_on:
  #     - redis
  #     - postgres
  #   restart: unless-stopped
  #   mem_limit: 64m

  # agent_maggie:
  #   build:
  #     context: .
  #     dockerfile: docker/Dockerfile.agent
  #   environment:
  #     AGENT_TYPE: data_collector
  #     REDIS_URL: redis://redis:6379
  #   depends_on:
  #     - redis
  #   restart: unless-stopped
  #   mem_limit: 64m

  # MCP Server (future integration)
  # fantasy_pl_mcp:
  #   image: fantasy-pl-mcp:latest
  #   container_name: fantasy_pl_mcp
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - FPL_API_URL=https://fantasy.premierleague.com/api
  #   restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
