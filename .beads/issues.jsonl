{"id":"ron_clanker-1","title":"Complete Docker infrastructure setup","description":"Commit docker-compose.yml, .env.example, and DOCKER_SETUP.md. These are currently uncommitted and blocking other development work.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-16T22:54:57.0236308+01:00","updated_at":"2025-10-16T23:07:57.216075693+01:00","closed_at":"2025-10-16T23:07:57.216075693+01:00"}
{"id":"ron_clanker-10","title":"Set up cron job for daily monitoring","description":"Run ./scripts/setup_cron.sh to automate daily monitoring at 3:00 AM. Verify cron job is working and logs are being generated.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-17T00:11:35.11123295+01:00","updated_at":"2025-10-17T14:01:39.242808037+01:00","closed_at":"2025-10-17T14:01:39.242808037+01:00"}
{"id":"ron_clanker-11","title":"Build pre-deadline squad optimizer","description":"Script to run 48hrs before GW8 deadline. Fetches latest data, rebuilds optimal squad considering injuries/news/prices. Fixes Isak issue (replace with better value forward).","notes":"Preliminary squad built (£95.7m/£100m). Key findings: Woltemade has rotation risk (4/7 starts) vs Thiago (7/7 starts, already on bench). Better xGI options: Mateta (0.70 xGI/90), João Pedro (39pts). Decision for tomorrow after press conferences.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T00:11:38.9968163+01:00","updated_at":"2025-10-17T13:03:27.058373507+01:00","closed_at":"2025-10-17T13:03:27.058373507+01:00"}
{"id":"ron_clanker-12","title":"Final GW8 squad selection and announcement","description":"24-48hrs before deadline: finalize squad, set captain, generate Ron's team announcement. Save to data/squads/gw8_team_announcement.txt","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-17T00:11:44.548814349+01:00","updated_at":"2025-10-17T13:03:40.268909583+01:00","closed_at":"2025-10-17T13:03:40.268909583+01:00","dependencies":[{"issue_id":"ron_clanker-12","depends_on_id":"ron_clanker-11","type":"blocks","created_at":"2025-10-17T00:11:47.465047308+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-13","title":"Extract Digger (DC Analyst) agent from existing scripts","description":"Convert analyze_dc_performers.py logic into agents/dc_analyst.py. Make it event-driven: subscribes to DATA_UPDATED, publishes DC_ANALYSIS_COMPLETE. Inherits from BaseAgent.","acceptance_criteria":"Agent runs autonomously, listens for events, publishes analysis results","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T10:35:18.4828656+01:00","updated_at":"2025-10-17T13:20:29.11288108+01:00","closed_at":"2025-10-17T13:20:29.11288108+01:00"}
{"id":"ron_clanker-14","title":"Extract Priya (Fixture Analyst) agent","description":"Convert analyze_fixtures.py into agents/fixture_analyst.py. Event-driven, subscribes to DATA_UPDATED, publishes FIXTURE_ANALYSIS_COMPLETE.","acceptance_criteria":"Agent provides fixture difficulty analysis for 6 gameweeks ahead on event trigger","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T10:35:30.803086165+01:00","updated_at":"2025-10-17T13:20:30.685897663+01:00","closed_at":"2025-10-17T13:20:30.685897663+01:00"}
{"id":"ron_clanker-15","title":"Extract Jimmy (Value Analyst) agent","description":"Extract value calculation logic from squad builders into agents/value_analyst.py. Combines DC, xG, fixtures, price to rank players. Subscribes to DC_ANALYSIS_COMPLETE, XG_ANALYSIS_COMPLETE, FIXTURE_ANALYSIS_COMPLETE.","acceptance_criteria":"Agent publishes VALUE_RANKINGS with top picks by position","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T10:35:41.259312643+01:00","updated_at":"2025-10-17T13:20:32.118181329+01:00","closed_at":"2025-10-17T13:20:32.118181329+01:00","dependencies":[{"issue_id":"ron_clanker-15","depends_on_id":"ron_clanker-13","type":"blocks","created_at":"2025-10-17T10:41:56.530143248+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-15","depends_on_id":"ron_clanker-14","type":"blocks","created_at":"2025-10-17T10:41:56.849765176+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-15","depends_on_id":"ron_clanker-16","type":"blocks","created_at":"2025-10-17T10:41:57.087041663+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-16","title":"Extract Sophia (xG Analyst) agent","description":"Create agents/xg_analyst.py to analyze expected goals/assists data. Subscribes to DATA_UPDATED, publishes XG_ANALYSIS_COMPLETE with attacking threat rankings.","acceptance_criteria":"Agent identifies high xG players and overperformers/underperformers","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T10:35:50.542803868+01:00","updated_at":"2025-10-17T13:20:33.705192417+01:00","closed_at":"2025-10-17T13:20:33.705192417+01:00"}
{"id":"ron_clanker-17","title":"Build Terry (Chip Strategist) agent","description":"Create agents/chip_strategist.py to optimize chip timing (Wildcard, Bench Boost, Triple Captain, Free Hit). Analyzes fixtures, DGWs, team value to recommend chip usage.","acceptance_criteria":"Agent publishes CHIP_RECOMMENDATION events with reasoning","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-17T10:39:16.56573977+01:00","updated_at":"2025-10-17T14:04:10.392009353+01:00","closed_at":"2025-10-17T14:04:10.392009353+01:00"}
{"id":"ron_clanker-18","title":"Build Ellie (Learning Agent) for decision tracking","description":"Create agents/learning_agent.py to log all decisions, track prediction accuracy (expected vs actual points), identify biases. Subscribes to TEAM_SELECTED, GAMEWEEK_COMPLETE.","acceptance_criteria":"Agent logs decisions to database, calculates agent performance metrics","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-17T10:40:44.329903312+01:00","updated_at":"2025-10-17T14:04:13.577085999+01:00","closed_at":"2025-10-17T14:04:13.577085999+01:00"}
{"id":"ron_clanker-19","title":"Implement Celery Beat scheduler for automation","description":"Set up Celery Beat to trigger timed events: daily data refresh (6AM), gameweek planning (48h/24h/6h before deadline), post-GW review (Monday). Integrates with event bus.","acceptance_criteria":"Scheduler automatically triggers events without human intervention","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T10:40:58.292762641+01:00","updated_at":"2025-10-17T13:34:42.298495547+01:00","closed_at":"2025-10-17T13:34:42.298495547+01:00"}
{"id":"ron_clanker-2","title":"Implement Rules Engine agent","description":"Parse FPL rules documents (2025/26 season), implement team validation, budget constraints, formation validator, Defensive Contribution point calculator. Foundation for all team selection.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-16T22:54:59.581150209+01:00","updated_at":"2025-10-16T23:30:02.825697195+01:00","closed_at":"2025-10-16T23:30:02.825697195+01:00","dependencies":[{"issue_id":"ron_clanker-2","depends_on_id":"ron_clanker-1","type":"blocks","created_at":"2025-10-16T22:56:26.136273318+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-20","title":"Implement Ron's consensus decision-making logic","description":"Enhance agents/manager.py to weigh inputs from all specialist agents, apply Ron's tactical philosophy, make autonomous squad selection. Subscribes to VALUE_RANKINGS, CHIP_RECOMMENDATION.","acceptance_criteria":"Ron makes final team decisions autonomously based on agent recommendations","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T10:41:08.649028653+01:00","updated_at":"2025-10-17T13:20:33.795982538+01:00","closed_at":"2025-10-17T13:20:33.795982538+01:00","dependencies":[{"issue_id":"ron_clanker-20","depends_on_id":"ron_clanker-15","type":"blocks","created_at":"2025-10-17T10:41:57.276924999+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-21","title":"Fix Ron's squad builder position assignment bug","description":"Squad builder not correctly selecting 15 players or assigning positions 1-15. Validation failing on 'Must have exactly 1 goalkeeper in starting XI'. Need to debug _build_squad_from_rankings and _assign_squad_positions methods in manager_agent_v2.py","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-17T12:37:38.769564511+01:00","updated_at":"2025-10-17T13:20:33.890483316+01:00","closed_at":"2025-10-17T13:20:33.890483316+01:00"}
{"id":"ron_clanker-22","title":"Build Transfer Strategy Agent (Hugo) - Core Planning Logic","description":"Create agents/transfer_strategy.py with core transfer planning logic. Subscribes to FIXTURE_ANALYSIS_COMPLETED, VALUE_RANKINGS_COMPLETED. Publishes TRANSFER_RECOMMENDED events. Includes: free transfer banking strategy (max 5), -4 hit calculation (only if EV \u003e 4pts over 3 GWs), 3-week rolling transfer plan.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T13:50:56.636674963+01:00","updated_at":"2025-10-17T13:54:25.868668709+01:00","closed_at":"2025-10-17T13:54:25.868668709+01:00"}
{"id":"ron_clanker-23","title":"Implement free transfer banking logic","description":"Logic to decide when to roll vs use free transfers. Consider: upcoming fixture swings (next 3 GWs), current squad strength vs upcoming opponents, value of targets available, price change timing. Bank towards max 5 if no urgent needs. Use strategically before fixture swings.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T13:51:04.913370082+01:00","updated_at":"2025-10-17T13:54:27.567329894+01:00","closed_at":"2025-10-17T13:54:27.567329894+01:00","dependencies":[{"issue_id":"ron_clanker-23","depends_on_id":"ron_clanker-22","type":"blocks","created_at":"2025-10-17T13:51:19.567737213+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-24","title":"Add multi-week transfer sequencing","description":"Plan 3-week rolling transfer strategy. Identify players to transfer OUT (fixtures turning bad, poor form, injury risk) and targets to bring IN (fixtures improving, undervalued). Sequence transfers optimally: urgent first, planned later. Coordinate with price changes.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T13:51:06.321355608+01:00","updated_at":"2025-10-17T13:54:27.659656443+01:00","closed_at":"2025-10-17T13:54:27.659656443+01:00","dependencies":[{"issue_id":"ron_clanker-24","depends_on_id":"ron_clanker-22","type":"blocks","created_at":"2025-10-17T13:51:19.852098856+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-25","title":"Implement hit calculation logic (-4 point hits)","description":"Calculate expected value of taking -4 point hits. Only recommend hit if: expected gain over next 3 GWs \u003e 4 points, considering fixtures, form, DC potential. Factor in: Player OUT remaining fixtures, Player IN upcoming fixtures, differential value, captaincy potential.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T13:51:07.706783157+01:00","updated_at":"2025-10-17T13:54:27.747541561+01:00","closed_at":"2025-10-17T13:54:27.747541561+01:00","dependencies":[{"issue_id":"ron_clanker-25","depends_on_id":"ron_clanker-22","type":"blocks","created_at":"2025-10-17T13:51:20.128984089+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-26","title":"Build Scout Agent framework - Intelligence gathering system","description":"Create base Scout agent to monitor external sources for injury/team news. Subscribes to scheduled triggers, publishes intelligence events for other agents to consume.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T15:14:12.77378192+01:00","updated_at":"2025-10-17T15:16:34.790155797+01:00","closed_at":"2025-10-17T15:16:34.790155797+01:00"}
{"id":"ron_clanker-27","title":"Implement WebsiteMonitor - Premier Injuries and BBC Sport scraping","description":"Build WebsiteMonitor class to scrape Premier Injuries and BBC Sport for injury/team news. Parse structured data, extract player names, injury details, return dates. Run every 30 mins.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T15:14:24.838736692+01:00","updated_at":"2025-10-17T15:24:08.684234985+01:00","closed_at":"2025-10-17T15:24:08.684234985+01:00","dependencies":[{"issue_id":"ron_clanker-27","depends_on_id":"ron_clanker-26","type":"blocks","created_at":"2025-10-17T15:14:45.16669303+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-28","title":"Build IntelligenceClassifier - Confidence scoring and player matching","description":"Create IntelligenceClassifier to assess intelligence reliability, assign confidence scores (0-1), match player names to FPL IDs, determine severity (CRITICAL/HIGH/MEDIUM/LOW), decide if actionable.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T15:14:36.080721654+01:00","updated_at":"2025-10-17T15:43:40.586131796+01:00","closed_at":"2025-10-17T15:43:40.586131796+01:00","dependencies":[{"issue_id":"ron_clanker-28","depends_on_id":"ron_clanker-26","type":"blocks","created_at":"2025-10-17T15:14:45.42949787+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-29","title":"Add YouTube transcript monitoring to Scout","description":"Monitor FPL YouTube channels for daily injury updates. Use youtube-transcript-api (free, no auth). Parse transcripts for injury mentions. Trusted channels: FPL Focal, Let's Talk FPL, etc.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-17T15:39:36.612547717+01:00","updated_at":"2025-10-17T15:52:47.983007127+01:00","closed_at":"2025-10-17T15:52:47.983007127+01:00"}
{"id":"ron_clanker-3","title":"Build Data Collection Agent with MCP client","description":"Connect to fantasy-pl-mcp server, fetch player stats/prices/ownership, retrieve fixtures, monitor injuries. Core data pipeline for all agents.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-16T22:55:02.164424219+01:00","updated_at":"2025-10-16T23:25:35.517778865+01:00","closed_at":"2025-10-16T23:25:35.517778865+01:00","dependencies":[{"issue_id":"ron_clanker-3","depends_on_id":"ron_clanker-1","type":"blocks","created_at":"2025-10-16T22:56:27.907491008+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-30","title":"Integrate Scout intelligence with Hugo for auto-response","description":"Hugo subscribes to INJURY_INTELLIGENCE events. When injury detected for squad player: flag for urgent transfer, identify replacements, calculate hit EV, publish transfer recommendation. Autonomous injury response.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-17T15:39:52.108456286+01:00","updated_at":"2025-10-17T15:57:56.564318042+01:00","closed_at":"2025-10-17T15:57:56.564318042+01:00"}
{"id":"ron_clanker-31","title":"Update README.md to reflect current system state","description":"Tidy up README to show completed Phase 1 \u0026 2 work. Keep Ron's picture and sunbed joke. Update architecture, agent descriptions, current capabilities. Remove outdated setup instructions.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-17T16:01:27.099960019+01:00","updated_at":"2025-10-17T17:48:29.478512017+01:00","closed_at":"2025-10-17T17:48:29.478512017+01:00"}
{"id":"ron_clanker-32","title":"Document deployment strategy: Direct vs Containerized agents","description":"Clarify that Phase 1-2 agents run as Python scripts. Containerization is Phase 3 (production). Update docker-compose.yml comments. RPi 3B can't build all containers simultaneously. Core infra (Redis/Postgres) stays containerized.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-17T17:04:32.521013471+01:00","updated_at":"2025-10-17T17:46:11.964603737+01:00","closed_at":"2025-10-17T17:46:11.964603737+01:00"}
{"id":"ron_clanker-33","title":"Scheduled Automated Operation - Complete infrastructure","description":"✅ COMPLETE: Daily cron jobs, health checks, notifications, documentation. Scripts: daily_scout.py, collect_fpl_data.py, pre_deadline_selection.py, monitor_prices.py, health_check.py, setup_cron.py, setup_notifications.py","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-17T21:56:05.342501455+01:00","updated_at":"2025-10-17T21:56:18.784710374+01:00","closed_at":"2025-10-17T21:56:18.784710374+01:00"}
{"id":"ron_clanker-34","title":"Price Change Prediction - ML model for price rises/falls","description":"Build ML model to predict player price changes 6-12 hours ahead. Tasks: Collect historical price data, track net transfers, build logistic regression → gradient boosting model, achieve 70%+ accuracy, integrate with Hugo for pre-emptive transfers","notes":"✅ SYSTEM COMPLETE - Waiting for data collection. Infrastructure complete: Database schema (4 tables), Logistic regression model (RPi3-optimized), Daily snapshot collection (tested), Training/prediction/verification scripts. Performance on RPi3: Snapshot 30-40s for 743 players, Prediction ~30s all players, Training \u003c5min, Memory \u003c50MB. Status: All code complete and tested. Waiting: 6 more days of snapshots (need 7 total). Next: Auto-trains Sun 04:00, predicts daily 01:30","status":"in_progress","priority":0,"issue_type":"feature","created_at":"2025-10-17T21:56:19.145336167+01:00","updated_at":"2025-10-17T22:15:10.056722752+01:00"}
{"id":"ron_clanker-35","title":"Player Performance Prediction - xG-based ML models","description":"Build xG-based prediction models for expected points. Tasks: Implement xG model, collect GW1-7 historical data, feature engineering (form, fixtures, DC, xG, opponent strength), train models per position (GK/DEF/MID/FWD), compare predicted vs actual, integrate with value analyst","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-17T21:56:28.7577125+01:00","updated_at":"2025-10-18T14:36:59.050003013+01:00","closed_at":"2025-10-18T14:36:59.050003013+01:00"}
{"id":"ron_clanker-36","title":"Multi-Gameweek Planning - Strategic planning 4-6 weeks ahead","description":"Implement strategic planning for multiple gameweeks. Tasks: Fixture difficulty prediction (3-6 GWs ahead), transfer planning sequences, chip timing optimization, template deviation analysis, budget planning for team value growth","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-17T21:56:39.249288136+01:00","updated_at":"2025-10-18T16:44:28.038479701+01:00","closed_at":"2025-10-18T16:44:28.038479701+01:00"}
{"id":"ron_clanker-37","title":"Learning and Improvement System - Track decisions and outcomes","description":"Build system to learn from experience. Tasks: Track all decisions (transfers, captain, chips), compare predicted vs actual outcomes, identify systematic biases, agent performance tracking, adjust weights based on accuracy, weekly review reports","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-17T21:56:39.547530973+01:00","updated_at":"2025-10-18T16:30:17.476024302+01:00","closed_at":"2025-10-18T16:30:17.476024302+01:00"}
{"id":"ron_clanker-38","title":"Telegram Bot - Ron's Updates \u0026 Commands","description":"Build web dashboard to monitor Ron. Tasks: Simple Flask/FastAPI app, show current team, show recent decisions and reasoning, display cached YouTube transcripts, show intelligence gathered, agent performance metrics, historical points tracking","notes":"NOTIFICATIONS: Post-deadline team announcements (with reasoning), transfer decisions (as made), chip usage alerts, post-gameweek reviews (Ron's candid analysis), price change alerts, injury news. COMMANDS: /status (current team), /team (formation), /league (mini-league standings), /chips (available chips), /predictions (next GW ML predictions). Integration with all decision-making scripts.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-17T21:56:50.098164612+01:00","updated_at":"2025-10-18T22:11:16.732823498+01:00","closed_at":"2025-10-18T22:11:16.732823498+01:00","dependencies":[{"issue_id":"ron_clanker-38","depends_on_id":"ron_clanker-54","type":"blocks","created_at":"2025-10-18T21:40:45.298919792+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-39","title":"Chip Strategy Optimization - Optimal chip timing","description":"Optimize chip usage timing. Tasks: Wildcard timing (major overhauls), Bench Boost timing (strong bench GWs), Triple Captain timing (high ceiling games), Free Hit timing (blank/double GWs), AFCON strategy (5 free transfers exploit)","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-17T21:56:51.894638994+01:00","updated_at":"2025-10-18T13:33:02.414933751+01:00","closed_at":"2025-10-18T13:33:02.414933751+01:00"}
{"id":"ron_clanker-4","title":"Design and implement database schema","description":"SQLite schema for players, gameweeks, decisions, predictions, learning metrics. See CLAUDE.md for schema requirements.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-16T22:55:04.586932103+01:00","updated_at":"2025-10-16T23:59:50.152530055+01:00","closed_at":"2025-10-16T23:59:50.152530055+01:00","dependencies":[{"issue_id":"ron_clanker-4","depends_on_id":"ron_clanker-1","type":"blocks","created_at":"2025-10-16T22:56:28.225875512+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-40","title":"FPL API Team Submission - Automatic team submission to FPL","description":"BLOCKED: Needs manual team registration first. Tasks: Manual team registration (user), research FPL API auth (session cookies), implement team submission endpoint, add transfer execution (buy/sell), captain selection submission, chip activation, safety checks, dry-run mode. Note: Unofficial API, may need browser network traffic reverse engineering","notes":"Team now registered\\! Clanker's Cloggers (ID: 12222054) registered for GW8. FPL_TEAM_ID added to .env. Ready to implement API submission when needed. Next: Research FPL API authentication (session cookies from browser network traffic)","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-17T21:57:01.196978515+01:00","updated_at":"2025-10-18T19:05:31.229252095+01:00"}
{"id":"ron_clanker-41","title":"Advanced ML Models - State-of-the-art FPL AI","description":"Long-term ML improvements. Tasks: Ensemble models (combine multiple prediction methods), reinforcement learning for long-term planning, neural networks for complex patterns, transfer learning from previous seasons, meta-learning (learn how to learn)","status":"closed","priority":3,"issue_type":"feature","created_at":"2025-10-17T21:57:12.369765019+01:00","updated_at":"2025-10-19T00:42:24.230033699+01:00","closed_at":"2025-10-19T00:42:24.230033699+01:00"}
{"id":"ron_clanker-42","title":"Risk Management - Rank-based strategy adaptation","description":"Adapt strategy based on current rank. Tasks: Rank-based strategy (aggressive if behind, conservative if ahead), calculate risk/reward of differentials, ownership-adjusted decisions (fade template when ahead), variance management (high variance picks when chasing)","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-17T21:57:12.588001049+01:00","updated_at":"2025-10-17T21:57:12.588001049+01:00"}
{"id":"ron_clanker-43","title":"Integration Improvements - Production robustness","description":"Quality of life and robustness improvements. Tasks: Better error handling and recovery, structured logging improvements, better testing coverage, Docker deployment optimization, database backups automation (✅ partially complete), monitoring and alerting (✅ health checks complete)","status":"open","priority":3,"issue_type":"chore","created_at":"2025-10-17T21:57:20.503521773+01:00","updated_at":"2025-10-17T21:57:20.503521773+01:00"}
{"id":"ron_clanker-44","title":"Install cron jobs for autonomous operation","description":"Install all cron jobs for GW9+ autonomous operation. Run: venv/bin/python scripts/setup_cron.py. Schedule: Daily data collection (02:30), Scout (03:00), Price snapshots (23:00), Price predictions (01:30), Price monitoring (hourly), Health checks (6h), DB maintenance (05:00), Pre-deadline selection (Fri 12:30/Sat 05:00), Weekly model training (Sun 04:00). Defer until after GW8 deadline to avoid mid-gameweek changes.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-17T22:31:39.474912674+01:00","updated_at":"2025-10-18T12:37:15.915856053+01:00","closed_at":"2025-10-18T12:37:15.915856053+01:00"}
{"id":"ron_clanker-45","title":"League Intelligence Agent - Competitive Analysis System","description":"Track league rivals: chip usage, transfers, bank balances, team compositions. Essential for late-season tactical decisions when chasing/defending league position. 406pts behind leader = need smart differentials + chip timing.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-18T12:18:46.841945257+01:00","updated_at":"2025-10-18T18:52:32.696205396+01:00","closed_at":"2025-10-18T18:52:32.696205396+01:00"}
{"id":"ron_clanker-46","title":"Fetch and store league standings data","description":"Use FPL API to fetch league standings, store team IDs, manager names, points, ranks. Database table: league_rivals with historical tracking per gameweek.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-18T12:18:55.554194834+01:00","updated_at":"2025-10-18T12:52:37.541037975+01:00","closed_at":"2025-10-18T12:52:37.541037975+01:00","dependencies":[{"issue_id":"ron_clanker-46","depends_on_id":"ron_clanker-45","type":"parent-child","created_at":"2025-10-18T12:19:21.226638935+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-47","title":"Track rival chip usage per gameweek","description":"Monitor which chips each rival has played (WC1, WC2, BB1, BB2, TC1, TC2, FH1, FH2). Calculate remaining chip arsenal for each rival. Critical for timing Ron's chips to maximize competitive advantage.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-18T12:18:58.278386602+01:00","updated_at":"2025-10-18T13:29:34.902823795+01:00","closed_at":"2025-10-18T13:29:34.902823795+01:00","dependencies":[{"issue_id":"ron_clanker-47","depends_on_id":"ron_clanker-45","type":"parent-child","created_at":"2025-10-18T12:19:23.034285646+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-48","title":"Track rival transfers and ITB","description":"Monitor each rival's weekly transfers (in/out), free transfers available, bank balance. Identify who's building value, who's taking hits, who's planning wildcards.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-18T12:19:00.964142342+01:00","updated_at":"2025-10-18T13:37:37.86065664+01:00","closed_at":"2025-10-18T13:37:37.86065664+01:00","dependencies":[{"issue_id":"ron_clanker-48","depends_on_id":"ron_clanker-45","type":"parent-child","created_at":"2025-10-18T12:19:25.716154061+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-49","title":"Differential analysis vs league rivals","description":"Compare Ron's team vs league leaders/chasers. Calculate effective ownership within league. Identify differential captains, differential premiums. Essential for catching 406pt gap.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-18T12:19:03.791419814+01:00","updated_at":"2025-10-18T13:24:24.880487356+01:00","closed_at":"2025-10-18T13:24:24.880487356+01:00","dependencies":[{"issue_id":"ron_clanker-49","depends_on_id":"ron_clanker-45","type":"parent-child","created_at":"2025-10-18T12:19:28.382290952+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-49","depends_on_id":"ron_clanker-46","type":"blocks","created_at":"2025-10-18T12:19:43.140836918+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-5","title":"Implement Player Valuation Agent","description":"Calculate expected points, identify undervalued players, prioritize Defensive Contribution earners. Simple form + fixtures to start.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-16T22:55:07.036522603+01:00","updated_at":"2025-10-16T23:30:28.800719762+01:00","closed_at":"2025-10-16T23:30:28.800719762+01:00","dependencies":[{"issue_id":"ron_clanker-5","depends_on_id":"ron_clanker-2","type":"blocks","created_at":"2025-10-16T22:56:30.56230304+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-5","depends_on_id":"ron_clanker-3","type":"blocks","created_at":"2025-10-16T22:56:30.838284741+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-50","title":"Global rankings analysis (top 100/1000)","description":"Scrape/analyze top 100 and top 1000 teams. Identify template picks, emerging differentials, chip timing patterns. Learn from the best while staying true to DC fundamentals.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-18T12:19:05.195779073+01:00","updated_at":"2025-10-18T19:35:53.337588559+01:00","closed_at":"2025-10-18T19:35:53.337588559+01:00","dependencies":[{"issue_id":"ron_clanker-50","depends_on_id":"ron_clanker-45","type":"parent-child","created_at":"2025-10-18T12:19:31.105532564+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-51","title":"Competitive position strategy advisor","description":"Based on league position, advise Ron on risk level: chasing=differentials+aggressive chips, leading=defensive coverage. Dynamic strategy that adapts to competitive context.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-18T12:19:06.718883685+01:00","updated_at":"2025-10-18T18:52:06.190695273+01:00","closed_at":"2025-10-18T18:52:06.190695273+01:00","dependencies":[{"issue_id":"ron_clanker-51","depends_on_id":"ron_clanker-45","type":"parent-child","created_at":"2025-10-18T12:19:33.92749527+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-51","depends_on_id":"ron_clanker-49","type":"blocks","created_at":"2025-10-18T12:19:36.595056058+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-52","title":"Current Gameweek Tracking - Single Source of Truth","description":"Multiple scripts are confused about current gameweek. Need reliable GW tracking: fetch from FPL API, update gameweeks table (is_current, is_finished), provide get_current_gw() utility. GW8 is underway but some code thinks it's GW7 or not started yet.","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-18T18:55:50.325570898+01:00","updated_at":"2025-10-18T19:00:06.071953303+01:00","closed_at":"2025-10-18T19:00:06.071953303+01:00"}
{"id":"ron_clanker-53","title":"Decision Synthesis Engine - Integrate Intelligence into Team Selection","description":"CRITICAL GAP: All intelligence (league intel, global rankings, chip strategy, fixture analysis) generates reports but doesn't feed into Ron's decisions. Need synthesis engine that: 1) Reads all intelligence reports, 2) Considers competitive position, 3) Evaluates risk/reward, 4) Provides recommendations to Manager Agent. Currently Manager uses basic player valuation only - ignoring league differentials, elite template, chip timing, fixture swings.","notes":"ML \u0026 Intelligence Integration Gap:\n\nML SYSTEMS (Built but Disconnected):\n✅ PlayerPerformancePredictor - Gradient Boosting per position, trained models exist\n✅ PriceChangePredictor - Logistic Regression for price movements\n✅ Feature engineering, model training/loading infrastructure\n❌ Predictions NOT stored in database\n❌ Predictions NOT used in decisions\n\nINTELLIGENCE SERVICES (Reports Generated, Not Consumed):\n✅ LeagueIntelligenceService - rivals, chips, differentials\n✅ ChipStrategyAnalyzer - optimal chip timing\n✅ FixtureOptimizer - DGW/BGW, fixture swings\n✅ GlobalRankingsAnalyzer - elite template (top 100/1000)\n❌ Reports sit in files/database\n❌ Manager Agent doesn't read them\n\nDECISION SYNTHESIS ENGINE (Missing):\nNeed unified system that:\n1. Runs ML predictions pre-deadline\n2. Gathers all intelligence\n3. Synthesizes recommendations considering:\n   - ML expected points\n   - League competitive position\n   - Elite template vs differentials\n   - Fixture swings\n   - Price movements\n   - Chip timing opportunities\n   - Risk/reward balance\n4. Provides structured recommendations to Manager Agent\n\nManager then applies Ron's philosophy and makes final call.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-18T19:47:10.353246279+01:00","updated_at":"2025-10-18T20:13:45.082486881+01:00","closed_at":"2025-10-18T20:13:45.082486881+01:00"}
{"id":"ron_clanker-54","title":"Post-Gameweek Data Collection \u0026 Review System","description":"Build system to collect post-gameweek data (Ron's points, rank, captain performance, mini-league standings, PL results) and generate Ron's post-match analysis via Claude. Includes data collector script, prompt templates, and integration with notification system (Telegram/Slack).","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-18T21:40:10.503096854+01:00","updated_at":"2025-10-18T21:48:24.198043932+01:00","closed_at":"2025-10-18T21:48:24.198043932+01:00"}
{"id":"ron_clanker-55","title":"Audit codebase for exposed credentials and sensitive data","description":"Search entire codebase for any hardcoded credentials, API keys, team IDs, league IDs, or other sensitive data that may have been committed to git. Check: Python files for hardcoded IDs/tokens, config files committed to git history, documentation with real credentials, database dumps or exports, any print/log statements with sensitive data. Fix by: removing from git history if found, moving to .env pattern, updating .gitignore if needed.","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-18T22:25:05.749850894+01:00","updated_at":"2025-10-18T22:44:32.453000686+01:00","closed_at":"2025-10-18T22:44:32.453000686+01:00"}
{"id":"ron_clanker-56","title":"Update all scripts to use utils/config.py for credentials","description":"Replace direct JSON config loading in all scripts with utils/config.py. Scripts affected: collect_gameweek_data.py, generate_post_match_prompt.py, test_telegram_notifications.py, run_telegram_bot.py, track_mini_league.py, track_global_rankings.py, generate_league_intelligence.py, and any others reading ron_config.json. Change from: json.load(open('config/ron_config.json')) to: from utils.config import load_config; config = load_config()","status":"closed","priority":1,"issue_type":"chore","created_at":"2025-10-18T22:25:20.528359881+01:00","updated_at":"2025-10-18T23:17:48.851704732+01:00","closed_at":"2025-10-18T23:17:48.851704732+01:00"}
{"id":"ron_clanker-57","title":"Add Telegram notifications to crontab jobs","description":"Update cron job scripts to send notifications to Telegram. Most scripts currently log to files only. Need to add notification calls for important events like: daily scout completion, league intelligence updates, deadline selections, price change alerts, and post-match reviews. Use existing telegram_bot/notifications.py module. Make notifications optional/configurable.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-19T22:33:30.922509334+01:00","updated_at":"2025-10-19T22:40:14.00082851+01:00","closed_at":"2025-10-19T22:40:14.00082851+01:00"}
{"id":"ron_clanker-58","title":"Fix missing database tables breaking Telegram notifications","description":"Two missing database tables are preventing Telegram notifications from being sent:\n\n1. bootstrap_data table - referenced by scripts/daily_scout.py:42\n2. leagues table - referenced by scripts/generate_league_intelligence.py:464\n\nBoth scripts are running successfully (07:00 daily) but failing to send Telegram notifications due to these missing tables.\n\nErrors:\n- daily_scout.py: 'no such table: bootstrap_data' \n- generate_league_intelligence.py: 'no such table: leagues'\n\nNeed to:\n1. Check schema.sql for table definitions\n2. Add missing tables or update scripts to use existing tables\n3. Test Telegram notifications work after fix","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-20T22:07:01.83651765+01:00","updated_at":"2025-10-20T22:27:23.271591107+01:00","closed_at":"2025-10-20T22:27:23.271591107+01:00"}
{"id":"ron_clanker-59","title":"Daily scout script times out during intelligence gathering","description":"The daily_scout.py script times out (\u003e30s) when gathering intelligence from YouTube/RSS/website monitors.\n\nIssue:\n- Script successfully gets current gameweek from database (fixed)\n- ScoutAgent.gather_intelligence() method now exists (fixed)\n- But the intelligence gathering process takes too long and times out\n\nLikely causes:\n- YouTube transcript fetching may be slow/blocking\n- RSS monitor may be waiting on slow feeds\n- Website scraping may have network delays\n\nImpact:\n- Daily scout cron job at 03:00 will timeout\n- No intelligence gathered\n- Telegram notifications won't be sent\n\nNeed to investigate performance and add timeouts/async handling to intelligence monitors.","status":"closed","priority":1,"issue_type":"bug","created_at":"2025-10-20T22:34:05.036237916+01:00","updated_at":"2025-10-20T22:46:05.468175171+01:00","closed_at":"2025-10-20T22:46:05.468175171+01:00"}
{"id":"ron_clanker-6","title":"Build Manager Agent (Ron Clanker) framework","description":"Central orchestrator that coordinates specialist agents, makes final decisions, communicates in Ron's persona. Foundation of autonomous system.","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-16T22:55:09.768785259+01:00","updated_at":"2025-10-16T23:35:21.184087275+01:00","closed_at":"2025-10-16T23:35:21.184087275+01:00","dependencies":[{"issue_id":"ron_clanker-6","depends_on_id":"ron_clanker-2","type":"blocks","created_at":"2025-10-16T22:56:32.719657008+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-60","title":"Autonomous GW9 Team Selection \u0026 Transfer Decisions","description":"Enable Ron to autonomously analyze GW8 results, plan GW9 strategy, and make transfer/selection decisions without human intervention (except final submission).\n\n**CONTEXT:**\n- Ron is playing (Team ID: 12222054, currently 14/14 in league)\n- GW8 in progress, finishing overnight\n- GW9 deadline likely Oct 25-26\n- Currently manually submitting team selections\n- Goal: Ron makes all decisions autonomously, human just clicks submit\n\n**WORKFLOW:**\n\nPhase 1: Post-GW8 Analysis (When GW8 completes)\n□ analyze_gw_results.py - Learn from GW8 outcomes\n□ post_match_review.py - Generate Ron's GW8 review\n□ Update prediction models with actual results\n□ Identify what worked / what didn't\n\nPhase 2: GW9 Intelligence Gathering (T-48h)\n□ Daily scout runs (injuries, rotation, suspensions)\n□ Fixture analysis for GW9\n□ Form analysis (last 3-6 GWs)\n□ Price change predictions\n□ League rival analysis\n\nPhase 3: Transfer Planning (T-24h)\n□ Identify transfer targets (underperformers to remove)\n□ Identify transfer targets (good picks to bring in)\n□ Calculate expected value of transfers\n□ Decide: Use free transfer or take -4 hit?\n□ Consider chip usage (wildcard, bench boost, etc)\n\nPhase 4: Team Selection (T-6h)\n□ Select starting XI (formation)\n□ Choose captain (expected points)\n□ Set vice-captain\n□ Arrange bench order (autosub priority)\n□ Validate team meets FPL rules\n\nPhase 5: Generate Announcement\n□ Create Ron's team announcement in his voice\n□ Explain transfers and reasoning\n□ Explain captain choice\n□ Save to reports/team_announcements/\n\nPhase 6: Manual Review \u0026 Submission (User)\n□ Review Ron's decisions\n□ Manually submit to FPL website\n□ (Future: Automate via ron_clanker-40)\n\n**BLOCKERS TO FIX:**\n1. pre_deadline_selection.py - Uses bootstrap_data table (needs fix)\n2. analyze_gw_results.py - Probably uses bootstrap_data (needs fix)\n3. Data collection timeout - May need fresh data for decisions\n\n**SUCCESS CRITERIA:**\n- Ron generates complete GW9 team selection\n- Includes transfer recommendations with reasoning\n- Includes captain choice with EV calculation\n- Generates announcement in Ron's voice\n- All decisions logged to database\n- No human intervention needed except final click\n\n**DEPENDENCIES:**\n- All database table fixes (completed)\n- Telegram notifications working (completed)\n- Intelligence gathering working (completed)\n","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-20T23:15:20.025853311+01:00","updated_at":"2025-10-21T12:03:15.104908664+01:00","closed_at":"2025-10-21T12:03:15.104908664+01:00","dependencies":[{"issue_id":"ron_clanker-60","depends_on_id":"ron_clanker-61","type":"blocks","created_at":"2025-10-20T23:16:49.678237028+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-60","depends_on_id":"ron_clanker-62","type":"blocks","created_at":"2025-10-20T23:44:05.481989682+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-61","title":"Fix pre_deadline_selection.py bootstrap_data table references","description":"Script uses non-existent bootstrap_data table. Need to change to use gameweeks/players tables like we did for other scripts.","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-20T23:16:40.138671031+01:00","updated_at":"2025-10-20T23:19:06.160987297+01:00","closed_at":"2025-10-20T23:19:06.160987297+01:00"}
{"id":"ron_clanker-62","title":"Fix gameweek selection logic + verify FPL finished flag timing","description":"PROBLEM:\nTeam selection logic needs to pick for next GW only when current GW matches are complete.\n\nSOLUTION APPROACH:\n1. Implement logic: if current_gw.finished == 1, pick for next_gw\n2. Fix collect_fpl_data.py timeout so we can actually get fresh data\n3. VERIFY: When does FPL API actually set finished=1?\n   - After last match ends?\n   - After bonus points awarded?\n   - Next day?\n   - Need to check tomorrow (Oct 21) to see GW8 state\n\nCURRENT STATE (Oct 20, 23:00):\n- GW8 matches: Complete ✓\n- GW8 bonus: Awarded ✓  \n- Database shows: finished=0 (stale or FPL not updated yet?)\n\nTODO:\n□ Implement selection logic with finished flag check\n□ Fix collect_fpl_data.py timeout\n□ Run data collection to get fresh state\n□ Check tomorrow if FPL has set finished=1\n□ Document actual FPL API behavior for future reference","notes":"RESOLVED - Gameweek syncing now working correctly!\n\nROOT CAUSE:\nDatabase was never syncing gameweek data from FPL API. The collect_fpl_data.py \nscript only logged the current gameweek but never wrote it to the database.\n\nFIXES IMPLEMENTED:\n1. Added Database.upsert_gameweek() method (data/database.py:334-372)\n   - Handles JSON encoding for chip_plays list field\n   - Updates all gameweek fields: finished, is_current, is_next, etc.\n\n2. Updated collect_fpl_data.py to sync all 38 gameweeks (scripts/collect_fpl_data.py:86-105)\n   - Changed from 'events' to 'gameweeks' key (DataCollector returns 'gameweeks')\n   - Now syncs all gameweeks on every run\n\n3. Fixed JSON encoding bug for empty lists\n   - Changed condition from 'if chip_plays and isinstance...' to 'if isinstance...'\n   - Empty lists are falsy in Python, so were being skipped\n\nVERIFIED:\n- GW8 IS marked as finished=1 in FPL API ✓\n- Database now correctly shows GW8 finished=1 ✓\n- Daily cron job (02:30) will keep gameweek status fresh ✓\n- Script runs successfully in ~3 minutes ✓\n\nFPL API TIMING (from research):\n- Gameweek finished flag is set 2-3 hours after last match ends\n- This is after bonus points are finalized (1 hour after final whistle)\n- Auto-subs and captain changes are processed\n- Then finished=True is set\n\nTEAM SELECTION LOGIC:\nReady to implement! Can now check if current_gw.finished == 1 before \nselecting team for next gameweek.","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-20T23:43:57.30470822+01:00","updated_at":"2025-10-21T11:23:46.988820001+01:00","closed_at":"2025-10-21T11:23:46.988820001+01:00","dependencies":[{"issue_id":"ron_clanker-62","depends_on_id":"ron_clanker-63","type":"blocks","created_at":"2025-10-20T23:47:23.523046008+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-63","title":"Fix collect_fpl_data.py - missing Database.upsert_team() method","description":"Script times out when fetching FPL data, preventing gameweek state updates.\n\nIMPACT:\n- Can't get fresh 'finished' status for gameweeks\n- Blocking autonomous team selection (ron_clanker-60, ron_clanker-62)\n- Scheduled cron job (02:30 daily) may be failing\n\nINVESTIGATION:\n- Script works but takes \u003e2 minutes (timeout limit)\n- Need to identify bottleneck (API calls, player data, etc)\n- May need async optimization or chunking\n\nNEXT STEPS:\n- Check logs/cron_data.log tomorrow morning\n- See if overnight cron job (02:30) completed\n- If still timing out, investigate and optimize","notes":"Script fails when trying to sync team data from FPL API.\n\nERROR:\nAttributeError: 'Database' object has no attribute 'upsert_team'\n\nLOCATION:\nscripts/collect_fpl_data.py:81 calls db.upsert_team(team_data)\n\nROOT CAUSE:\nDatabase class (data/database.py) has upsert_player() and upsert_fixture() \nbut is missing upsert_team() method.\n\nIMPACT:\n- Failing for 3 days (since Oct 19)\n- Scheduled cron job (02:30 daily) fails on team sync\n- Players sync successfully, but teams table not updated\n- Blocking gameweek state updates\n\nFIX:\nAdd upsert_team() method to Database class following same pattern as \nupsert_player() and upsert_fixture().","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-20T23:46:27.642627795+01:00","updated_at":"2025-10-21T09:35:47.973596931+01:00","closed_at":"2025-10-21T09:35:47.973596931+01:00"}
{"id":"ron_clanker-64","title":"Slack/Discord Webhook Integration for Team Announcements","description":"Implement webhook notifications to send Ron's team announcements to Slack/Discord channels.\n\nFEATURES:\n- Send pre-deadline team announcements to configured webhook\n- Include transfer details, captain choice, chip usage\n- Format in Ron's voice with proper markdown\n- Support both Slack and Discord webhook formats\n- Add webhook URL to config/environment\n- Error handling for failed webhook calls\n\nINTEGRATION POINTS:\n- scripts/pre_deadline_selection.py (already has stub at line 152-179)\n- Could also notify on: price changes, injury news, deadline reminders\n\nTESTING:\n- Test with Discord webhook (easier to set up)\n- Verify Slack formatting works\n- Handle rate limits gracefully\n\nDEPENDENCIES:\n- Requires WEBHOOK_URL environment variable\n- Uses requests library (already available)","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-21T12:09:37.618183566+01:00","updated_at":"2025-10-21T22:07:36.20842392+01:00","closed_at":"2025-10-21T22:07:36.20842392+01:00"}
{"id":"ron_clanker-65","title":"Fix ML prediction storage schema mismatch","description":"DecisionSynthesis engine trying to store predictions with 'prediction_date' column that doesn't exist in player_predictions table.\n\nERROR: table player_predictions has no column named prediction_date\n\nCURRENT SCHEMA:\n- player_id, gameweek, predicted_points, predicted_minutes, prediction_confidence, actual_points, prediction_error, model_version, created_at\n\nISSUE:\n- ML code trying to use prediction_date field\n- Causes hundreds of 'Failed to store prediction' errors\n- Non-blocking (system falls back) but pollutes logs\n\nFIX OPTIONS:\n1. Add prediction_date column to schema via migration\n2. Update ML code to use created_at instead of prediction_date\n3. Remove prediction_date usage if redundant with created_at\n\nLOCATION:\n- Likely in agents/ml/decision_synthesis.py or similar ML module\n- Error occurs during synthesize_recommendations() call","status":"open","priority":3,"issue_type":"bug","created_at":"2025-10-21T12:15:43.999136222+01:00","updated_at":"2025-10-21T12:15:43.999136222+01:00"}
{"id":"ron_clanker-66","title":"Add decision logging to manager agent","description":"Manager agent should log high-level decisions to decisions table for learning/analysis.\n\nCURRENT STATE:\n- Transfers are logged to transfers table ✓\n- Team stored in my_team table ✓\n- But no entries in decisions table (COUNT = 0)\n\nWHAT TO LOG:\n- Team selection decision (gameweek, reasoning, chip usage)\n- Captain choice (player, reasoning, expected points)\n- Formation decision (starting XI rationale)\n- Transfer strategy (why transfers made/not made)\n- Risk assessment (league position, points gap)\n\nLOCATION:\n- agents/manager.py - make_weekly_decision() method\n- Should call db.log_decision() after making choices\n\nBENEFIT:\n- Track decision quality over time\n- ML learning from what worked/didn't work\n- Audit trail of Ron's logic\n- Compare expected vs actual outcomes","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-21T13:59:10.050182579+01:00","updated_at":"2025-10-21T14:09:12.876980053+01:00","closed_at":"2025-10-21T14:09:12.876980053+01:00"}
{"id":"ron_clanker-67","title":"Fix captain assignment ID field bug - ML captain not being set","description":"agents/manager.py:558 compares player['id'] (row ID) instead of player_id (FPL ID). ML recommends Haaland but sets Roefs as captain because comparison fails. Same ID field bug we fixed elsewhere.","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-21T14:11:48.181443203+01:00","updated_at":"2025-10-21T14:15:26.956772804+01:00","closed_at":"2025-10-21T14:15:26.956772804+01:00"}
{"id":"ron_clanker-68","title":"Fix vice captain assignment when ML differential not in team","description":"agents/manager.py:574 only checks if captain is set, not vice captain. When ML recommends a differential_option player not in the team (e.g., Ekitiké), no vice captain gets set at all. Need to fallback to second-best player in actual team for vice captain.","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-21T14:28:03.156737506+01:00","updated_at":"2025-10-21T14:31:52.381151893+01:00","closed_at":"2025-10-21T14:31:52.381151893+01:00"}
{"id":"ron_clanker-69","title":"Fix vice captain to use ML xP predictions not valuation agent","description":"Vice captain fallback logic (manager.py:586) uses valuation_agent.calculate_expected_points() which gives different results than ML predictions. Should use ML xP to assign vice captain to actual second-highest scorer. Currently Roefs (1.71 xP) is vice but Senesi (8.76 xP) should be.","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-21T14:39:53.156172559+01:00","updated_at":"2025-10-21T14:48:44.9085429+01:00","closed_at":"2025-10-21T14:48:44.9085429+01:00"}
{"id":"ron_clanker-7","title":"Analyze GW1-7 performance data for DC specialists","description":"Fresh GW8 entry = 6 gameweeks of REAL data to analyze. Identify defenders averaging 10+ CBI+Tackles, midfielders 12+ DC actions. This is the market inefficiency.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-16T22:55:12.530218069+01:00","updated_at":"2025-10-16T23:27:36.734836302+01:00","closed_at":"2025-10-16T23:27:36.734836302+01:00","dependencies":[{"issue_id":"ron_clanker-7","depends_on_id":"ron_clanker-3","type":"blocks","created_at":"2025-10-16T22:56:36.675751884+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-70","title":"Optimize starting XI selection based on expected points","description":"Ron should select best 11 players by xP within formation rules, not just keep GW8 positions. Currently Richards (6.01 xP) benched while Thiago (4.92 xP) starts. Need logic to: 1) Get xP for all 15 players 2) Find best valid formation maximizing total xP 3) Assign positions 1-11 to starters, 12-15 to bench.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-21T14:39:57.788849924+01:00","updated_at":"2025-10-21T14:55:43.072707385+01:00","closed_at":"2025-10-21T14:55:43.072707385+01:00"}
{"id":"ron_clanker-71","title":"Fix transfer logic to consider all positions and use full ML context","description":"Transfer recommendations currently have critical flaws:\n\nPROBLEM 1: Only considers top 20 OVERALL players\n- Line 449 in manager.py: top_players = all_ranked_players[:20]\n- This excludes most GKs/DEFs since they have lower xP than MIDs/FWDs\n- Roefs (0.37 value_score) can't be replaced because no GKs in top 20\n\nPROBLEM 2: Limited data usage in ML predictions\n- ML should factor in:\n  * Fixture difficulty (home/away)\n  * Opponent strength\n  * Player form trends\n  * Injury/suspension risk\n  * Price changes\n  * Multi-gameweek value\n- Currently using mainly: xP, form, ownership\n\nFIX NEEDED:\n1. Search for replacements by POSITION from full 591-player list\n   - Get top N players PER position\n   - Not top N overall\n   \n2. Enhance ML feature set:\n   - Add fixture difficulty ratings\n   - Add home/away splits\n   - Add opponent defensive/attacking strength\n   - Add player momentum (form trend)\n   - Add rotation risk indicators\n\nEXPECTED OUTCOME:\n- Roefs (1.71 xP, £4.6m) → Better GK option found\n- Transfer logic considers all 591 players, filtered by position\n- Decisions use comprehensive match context","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-21T16:07:44.047315618+01:00","updated_at":"2025-10-21T17:23:40.115541941+01:00","closed_at":"2025-10-21T17:23:40.115541941+01:00"}
{"id":"ron_clanker-72","title":"Integrate TransferOptimizer into ManagerAgent","description":"Replace old single-transfer logic in ManagerAgent with new TransferOptimizer.\n\nCurrent state:\n- TransferOptimizer fully implemented and tested\n- Evaluates all positions, multi-GW value, roll vs make decisions\n- All data visible and transparent\n\nIntegration tasks:\n1. Update ManagerAgent.decide_transfers() to use TransferOptimizer\n2. Wire up to pre_deadline_selection.py script\n3. Add fixture difficulty display to output\n4. Integrate price change predictions for urgency\n5. Store transfer recommendations in decisions table\n6. Test end-to-end with real deadline workflow\n\nBenefits:\n- Much smarter transfer decisions (+36pts vs +3pts in test case)\n- Considers all positions not just weakest overall\n- Multi-gameweek planning instead of single GW\n- Proper roll vs make logic","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-21T19:16:01.483290334+01:00","updated_at":"2025-10-21T19:45:27.636237186+01:00","closed_at":"2025-10-21T19:45:27.636237186+01:00"}
{"id":"ron_clanker-73","title":"Add price tracking and multi-transfer chains to TransferOptimizer","description":"Enable complex transfer sequences like 'downgrade 2 players to afford premium'.\n\nCURRENT LIMITATION:\n- TransferOptimizer only considers single transfers\n- Doesn't track purchase_price vs selling_price (50% sell-on loss)\n- Can't plan transfer chains across multiple gameweeks\n\nNEEDED:\n1. Price tracking in my_team table (purchase_price, selling_price already exist)\n2. Calculate true available budget = bank + (selling_price - purchase_price)/2\n3. Multi-transfer planning:\n   - GW10: Sell player A (£8m) → buy player B (£5m), bank £3m\n   - GW11: Use £3m + bank to buy player C (£11m)\n4. Transfer chains within same GW:\n   - Sell X→Y to fund Z→W (need to do in correct order)\n5. Display available funds after each proposed transfer\n\nEXAMPLE USE CASE:\n'I want Haaland (£14.7m) but only have £7.5m forward. Need to downgrade João Pedro (£7.5m) \nAND downgrade a midfielder to free up £7.2m more.'\n\nINTEGRATION:\n- Add to TransferOptimizer._evaluate_position_transfers()\n- Show multi-transfer sequences in output\n- Consider in roll vs make decision (worth using 2 FTs?)","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-21T19:26:31.953946707+01:00","updated_at":"2025-10-21T19:26:31.953946707+01:00"}
{"id":"ron_clanker-74","title":"Integrate chip strategy into transfer decision pipeline","description":"Transfer optimizer should consider chip usage as alternative to transfers.\n\nCURRENT STATE:\n- ChipStrategyAnalyzer exists in intelligence/chip_strategy.py\n- Tracks rival chip usage, recommends timing\n- NOT integrated with TransferOptimizer\n\nINTEGRATION NEEDED:\n1. Add chip recommendations to TransferOptimizer.optimize_transfers()\n2. Decision hierarchy:\n   - If Wildcard recommended → DEFER transfers, build optimal 15-man squad\n   - If Free Hit recommended → DEFER transfers, one-week punt team\n   - If Bench Boost/Triple Captain → coordinate with transfers for best week\n3. Chip vs Transfer comparison:\n   - Expected value of best transfer: +8 points over 4 GWs\n   - Expected value of Wildcard NOW: rebuild team, gain +20 over 8 GWs\n   - Decision: Use Wildcard, defer transfers\n4. Output chip recommendation alongside transfer recommendation\n\nCHIP TIMING LOGIC:\n- Wildcard: Team in crisis (4+ weak players) OR fixture swing\n- Bench Boost: Strong bench + good fixtures for all 15 players\n- Triple Captain: Highest ceiling gameweek (Haaland vs Luton at home)\n- Free Hit: Blank/double gameweek OR one-week differential punt\n\nEXAMPLE OUTPUT:\n================================================================================\nRECOMMENDATION\n================================================================================\nAction: CHIP (Wildcard 1)\nReasoning: Team has 5 players with poor fixtures GW10-15. Wildcard allows \nfull rebuild. Expected gain: +25pts over next 6 GWs vs +8pts from transfers.\n\nAlternative: Make transfer (João Pedro → Ekitiké for +8pts)\n\nChip vs Transfer: Wildcard WINS by +17 points\n================================================================================","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-21T19:27:07.142011533+01:00","updated_at":"2025-10-21T20:42:17.258308878+01:00","closed_at":"2025-10-21T20:42:17.258308878+01:00"}
{"id":"ron_clanker-75","title":"Add template vs differential strategy to transfer decisions","description":"Consider ownership % and competitive context in transfer recommendations.\n\nCURRENT STATE:\n- Ownership data available (selected_by_percent field)\n- No logic to factor this into decisions\n\nSTRATEGY FRAMEWORK:\n1. Define thresholds:\n   - Template: \u003e50% owned\n   - High ownership: 30-50% owned  \n   - Differential: \u003c30% owned\n   - Maverick differential: \u003c10% owned\n\n2. Competitive context (from league intelligence):\n   - LEADING league (gap \u003e +50pts): Cover template, avoid risks\n   - CLOSE race (gap ±20pts): Balanced, slight template bias\n   - CHASING (gap \u003c -50pts): Need differentials to catch up\n   - FAR BEHIND (gap \u003c -200pts): Aggressive differentials, high ceiling\n\n3. Template coverage analysis:\n   - Check: Do we own the high-ownership players?\n   - Risk: Missing template player with great fixtures = massive loss\n   - Example: Haaland 65% owned, home to Luton - MUST own or risk -15pts swing\n\n4. Differential opportunities:\n   - When chasing: Prioritize \u003c30% owned players with high xP\n   - When leading: Avoid \u003c10% owned (too risky)\n   - Balance: Mix of template + selective differentials\n\nINTEGRATION:\n- Add to TransferOptimizer output\n- Show ownership % for each transfer option\n- Highlight template risks in current team\n- Adjust value scoring based on competitive context\n\nEXAMPLE OUTPUT:\nTemplate Analysis:\n  ✓ Haaland (65% owned) - COVERED\n  ✓ Saka (58% owned) - COVERED\n  ⚠️ Salah (72% owned) - MISSING (£12.8m) - HIGH RISK if he has good fixtures\n\nDifferential Opportunities (chasing):\n  Ekitiké (8% owned) - xP 13.2 next 4 GWs - MAVERICK PICK\n  Richarlison (18% owned) - xP 10.2 next 4 GWs - GOOD DIFFERENTIAL","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-21T19:27:43.089902278+01:00","updated_at":"2025-10-21T19:27:43.089902278+01:00"}
{"id":"ron_clanker-76","title":"Implement learning system for transfer decision thresholds","description":"Learn optimal roll vs make thresholds from historical outcomes.\n\nCURRENT STATE:\n- Hardcoded thresholds: 2.0 pts/GW for free transfer, 4.0 for hit\n- No feedback loop to validate if these are optimal\n- Decisions table exists but not used for learning\n\nLEARNING SYSTEM:\n1. Track every transfer decision:\n   - Recommended: João Pedro → Ekitiké, predicted +9.1 pts/GW\n   - Actual outcome: Gained +12.3 pts over 4 GWs (better than predicted!)\n   - Learning: Model was conservative, trust higher variance picks more\n\n2. Calculate decision quality metrics:\n   - Prediction accuracy: How close was xP to actual points?\n   - Transfer value: Did transfer beat threshold? By how much?\n   - Missed opportunities: Should we have rolled when we made transfer?\n   - Regret analysis: Should we have made transfer when we rolled?\n\n3. Adjust thresholds dynamically:\n   Week 1-5: Use default thresholds (2.0/4.0)\n   Week 6+: Start learning\n   - If transfers consistently beat threshold by 3+: Lower threshold\n   - If transfers often fail to beat threshold: Raise threshold\n   - If rolled transfers would have been good: Lower threshold\n\n4. Position-specific learning:\n   - GK transfers: Might have higher threshold (less variance)\n   - FWD transfers: Might have lower threshold (high variance, high upside)\n   - DEF transfers: Depend on clean sheet luck\n\nDATABASE SCHEMA NEEDED:\n\n\nINTEGRATION:\n- Add to TransferOptimizer.__init__() - load learned thresholds\n- After each GW: Run learning script to update thresholds\n- Display current thresholds in output for transparency","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-21T19:30:20.56479507+01:00","updated_at":"2025-10-21T19:30:20.56479507+01:00"}
{"id":"ron_clanker-77","title":"Consolidate gameweek data collection into single reliable script","description":"PROBLEM:\nMultiple data collection scripts exist with overlapping functionality and bugs:\n- scripts/collect_fpl_data.py (works but slow, times out)\n- scripts/collect_gameweek_data.py (broken - 'no such table: rival_teams')\n- Partial/duplicate data in player_gameweek_history causing wrong reviews\n\nIMPACT:\n- Ron's Slack reviews have wrong player points (Haaland 0pts vs actual 26pts)\n- Duplicate player records (Gabriel x2)\n- Unclear which script to run after each gameweek\n- Data quality issues break ML predictions \u0026 banter accuracy\n\nCONSOLIDATION NEEDED:\n1. Single authoritative script for post-gameweek collection\n2. Collects ALL required data:\n   - Player gameweek points (player_gameweek_history)\n   - League standings (league_standings_history)\n   - Rival team picks (rival_team_picks)\n   - Ron's team state (my_team)\n3. Handles duplicates properly (UPSERT, not INSERT)\n4. Fast enough to not timeout\n5. Clear documentation on when/how to run\n\nAPPROACH:\n- Fix collect_gameweek_data.py OR enhance collect_fpl_data.py\n- Add deduplication logic\n- Add data validation/quality checks\n- Document as THE script for post-GW collection\n- Maybe add to cron for automation","status":"in_progress","priority":2,"issue_type":"bug","created_at":"2025-10-21T22:09:10.380748714+01:00","updated_at":"2025-10-22T11:55:16.306639409+01:00"}
{"id":"ron_clanker-78","title":"ML model producing incorrect GK predictions - Roefs 1.6xP despite 6pts/gw average","description":"CRITICAL BUG: ML predictions for goalkeepers are unreliable.\n\nEVIDENCE:\n- Roefs predicted 1.6 xPts for GW9\n- Roefs actual history: 8 GWs played, 90 mins each, averaging 6pts/gw\n- Model thinks he's between backup GKs (0.5-0.7 xP) and starters (4-6 xP)\n- This caused transfer optimizer to recommend swapping Roefs for Lammens\n- Should have recommended Sarr (7.1 xP) instead\n\nROOT CAUSE:\n- GK position model (position_1) may have training issues\n- Could be missing features or incorrect weighting\n- Need to investigate model/prediction/position_1_gw8_stacked.pkl\n\nIMPACT:\n- Transfer recommendations are wrong\n- Can't trust GW9 team selection\n- Affects all GK evaluation\n\nFIX NEEDED:\n1. Investigate GK model training data\n2. Check feature engineering for GKs\n3. Retrain position 1 model\n4. Validate all position models against actual GW8 results","status":"in_progress","priority":0,"issue_type":"bug","created_at":"2025-10-22T13:08:36.926205779+01:00","updated_at":"2025-10-22T14:03:18.303582082+01:00"}
{"id":"ron_clanker-79","title":"Close the learning loop - auto-retrain ML models after each gameweek","description":"MISSING: Automatic model retraining to close the learning loop\n\nCURRENT STATE:\n✅ Post-GW performance review runs (analyze_gw_results.py, Monday 08:00)\n✅ Performance tracker measures prediction accuracy (RMSE, MAE, bias)\n✅ Data stored in learning_metrics and player_predictions tables\n✅ Training script exists (train_prediction_models.py)\n❌ NO automatic retraining scheduled\n\nTHE LOOP:\n1. GW finishes → collect_post_gameweek_data.py ✅\n2. Measure accuracy → post_gameweek_review.py ✅  \n3. Retrain models with new data → MISSING ❌\n4. Generate predictions for next GW → predict_gameweek.py ✅\n\nWHAT'S NEEDED:\n1. Schedule train_prediction_models.py to run after GW data collection\n2. Suggested cron: Monday 06:00 (after data collection at 02:30, before intelligence at 07:00)\n3. Models should retrain incrementally with ALL available GW data\n4. Store model version/timestamp for tracking improvements\n\nWHY IT MATTERS:\n- Currently using GW8 models for GW9 predictions\n- Models never improve from actual results\n- Miss opportunity to learn from mistakes (Roefs 1.6xP vs 7 actual)\n- System can't adapt to meta changes, fixture patterns, etc.\n\nEXPECTED OUTCOME:\n- Weekly model retraining with all historical data\n- Improving accuracy over season\n- Self-learning system as per CLAUDE.md design","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-22T14:20:53.821627669+01:00","updated_at":"2025-10-22T15:36:44.072943571+01:00","closed_at":"2025-10-22T15:36:44.072943571+01:00"}
{"id":"ron_clanker-8","title":"Build GW8 optimal squad","description":"Use GW1-7 analysis to select 15 players within £100m budget. Prioritize proven DC earners. This is Ron's first team.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T22:55:16.259532896+01:00","updated_at":"2025-10-16T23:34:37.800859657+01:00","closed_at":"2025-10-16T23:34:37.800859657+01:00","dependencies":[{"issue_id":"ron_clanker-8","depends_on_id":"ron_clanker-7","type":"blocks","created_at":"2025-10-16T22:56:38.688757103+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-8","depends_on_id":"ron_clanker-5","type":"blocks","created_at":"2025-10-16T22:56:46.422833796+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-8","depends_on_id":"ron_clanker-2","type":"blocks","created_at":"2025-10-16T22:56:48.25124125+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-80","title":"Starting XI optimizer regression - Haaland benched with 6.71 xP","description":"CRITICAL REGRESSION: ron_clanker-70 was supposedly fixed but lineup optimizer is still broken.\n\nCURRENT GW9 LINEUP BUG:\nSTARTING (positions 1-11):\n- Pope (GK) 4.98 xP\n- Senesi (DEF) 8.47 xP\n- Guéhi (DEF) 8.13 xP\n- Gabriel (DEF) 7.95 xP\n- Burn (DEF) 6.87 xP ← Should this be a DEF in midfield?\n- Cullen (MID) 8.31 xP\n- Sarr (MID) 6.29 xP\n- Ndiaye (MID) 5.94 xP\n- Garner (MID) 5.33 xP ← LOWER than bench players!\n- Thiago (FWD) 7.49 xP\n- Richarlison (FWD) 7.35 xP\n\nBENCHED (positions 12-15):\n- Roefs (GK) 3.31 xP [C] ← WHY IS GK CAPTAIN?!\n- Richards (DEF) 5.02 xP\n- Semenyo (MID) 3.71 xP\n- Haaland (FWD) 6.71 xP ← £14.7m PREMIUM BENCHED!\n\nPROBLEMS:\n1. Haaland (6.71 xP) benched while Garner (5.33 xP) starts\n2. Roefs is captain (should never captain a GK)\n3. Burn (DEF) in position 5 - is this counting as MID?\n4. Formation rules not being respected\n\nREQUIREMENT:\nStarting XI should be the 11 highest xP players that form a VALID formation:\n- 1 GK (always Pope 4.98 \u003e Roefs 3.31)\n- 3-5 DEF\n- 2-5 MID  \n- 1-3 FWD\n\nCORRECT GW9 LINEUP SHOULD BE:\nGK: Pope (4.98)\nDEF: Senesi (8.47), Guéhi (8.13), Gabriel (7.95)\nMID: Cullen (8.31), Haaland (6.71), Sarr (6.29), Ndiaye (5.94)\nFWD: Thiago (7.49), Richarlison (7.35)\n\nWait - Haaland is FWD not MID! Let me recalculate...\n\nActually correct lineup:\nGK: Pope (4.98)\nDEF: Senesi (8.47), Guéhi (8.13), Gabriel (7.95), Burn (6.87)\nMID: Cullen (8.31), Sarr (6.29), Ndiaye (5.94), Garner (5.33)\nFWD: Thiago (7.49), Richarlison (7.35), Haaland (6.71)\n\nWAIT - that's 12 players! Formation must be 3-4-3 or 4-4-2 or 4-3-3 etc.\n\nBEST 3-4-3:\nGK: Pope (4.98)\nDEF: Senesi (8.47), Guéhi (8.13), Gabriel (7.95)\nMID: Cullen (8.31), Sarr (6.29), Ndiaye (5.94), Burn (6.87)\nFWD: Thiago (7.49), Richarlison (7.35), Haaland (6.71)\nTotal: 69.49 xP\n\nCurrent lineup has Haaland benched - that's WRONG.\n\nFIX NEEDED:\n1. Implement proper formation optimizer\n2. Test all valid formations (3-4-3, 3-5-2, 4-3-3, 4-4-2, 4-5-1, 5-3-2, 5-4-1)\n3. Pick formation + players that maximize total xP\n4. NEVER bench a player with higher xP than a starter in the same/flex position","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-22T15:57:34.860170168+01:00","updated_at":"2025-10-22T16:25:28.612856727+01:00","closed_at":"2025-10-22T16:25:28.612856727+01:00"}
{"id":"ron_clanker-81","title":"Consolidate to event-driven architecture - phase out manager.py","description":"GOAL: Single event-driven manager architecture for autonomous operation\n\nCURRENT STATE:\n- Two managers: manager.py (sync, 1047 lines) and manager_agent_v2.py (event-driven, 583 lines)\n- Production cron uses manager.py (synchronous approach)\n- Event infrastructure exists: BaseAgent, EventBus, events.py\n- Multiple agents already event-driven: scout, value_analyst, fixture_analyst, etc.\n- manager_agent_v2.py is incomplete (no transfers, no chips, no ML integration)\n\nVISION (from CLAUDE.md):\n- Event-driven multi-agent hierarchical system\n- Agents react to gameweeks, price changes, injuries\n- Ron coordinates specialists via events\n- Fully autonomous with human adding capabilities\n\nPLAN:\n1. Audit what manager.py has that manager_agent_v2.py lacks:\n   - Transfer optimization logic\n   - Chip usage decisions\n   - ML integration (DecisionSynthesisEngine)\n   - Gameweek review\n   \n2. Port missing features to manager_agent_v2.py (RonManager)\n   - Add async transfer decision methods\n   - Add chip strategy integration\n   - Add ML synthesis integration\n   - Ensure formation optimizer works (DONE - ron_clanker-80)\n\n3. Update pre_deadline_selection.py to use RonManager\n   - Switch from sync to async/event-driven\n   - Test thoroughly before GW deadline\n\n4. Deprecate manager.py\n   - Archive as agents/manager_legacy.py\n   - Update all scripts\n   - Remove from active codebase\n\n5. Document event-driven workflows\n   - Update CLAUDE.md with actual architecture\n   - Add event flow diagrams\n   - Document agent coordination patterns\n\nDEPENDENCIES:\n- Block until after GW9 deadline (safe to refactor)\n- Formation optimizer fix already applied to both (ron_clanker-80)\n\nSUCCESS CRITERIA:\n- Single RonManager class (event-driven)\n- All production scripts use event architecture\n- No manager.py in active codebase\n- System remains fully autonomous\n- Ready for adding new capabilities via events","status":"in_progress","priority":2,"issue_type":"task","created_at":"2025-10-22T16:36:31.407269225+01:00","updated_at":"2025-10-23T12:55:14.245521672+01:00","dependencies":[{"issue_id":"ron_clanker-81","depends_on_id":"ron_clanker-85","type":"parent-child","created_at":"2025-10-23T14:20:39.686597923+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-82","title":"Implement CURRENT/DRAFT team architecture","description":"CRITICAL: Team data is inconsistent and getting corrupted during test runs.\n\nPROBLEM:\n- Multiple 'test' teams being written to my_team table\n- No distinction between draft/test selections and final locked-in team\n- Transfer logic adding players without removing old ones\n- Can't tell what Ron's ACTUAL current team is vs predictions\n\nREQUIRED ARCHITECTURE:\n1. ONE place for CURRENT team (what's actually locked in FPL)\n2. ONE place for DRAFT team (working version for next GW)\n3. Clear workflow: DRAFT → test → iterate → confirm → CURRENT\n\nNEW SCHEMA:\n- current_team: 15 players, the locked-in team\n- draft_team: 15 players for specific gameweek, gets wiped/regenerated\n- draft_transfers: proposed transfers for draft\n- team_history: rename my_team, historical record only\n\nWORKFLOW:\n1. Start of GW prep: Copy CURRENT → DRAFT\n2. Run predictions: Wipe DRAFT, copy CURRENT, apply recommendations\n3. Iterate: Can run predictions multiple times, always starts from CURRENT\n4. Confirm: User approves DRAFT → becomes CURRENT\n5. After GW: CURRENT → team_history for that GW\n\nMIGRATION NEEDED:\n- Create new tables\n- Populate current_team from GW8 actual team\n- Update Database class methods\n- Update manager.py/manager_agent_v2.py\n- Clear bad GW9 draft data\n\nBLOCKED BY: Need to establish what Ron's ACTUAL GW8 team was","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-22T17:05:58.786246643+01:00","updated_at":"2025-10-22T18:36:00.169369804+01:00","closed_at":"2025-10-22T18:36:00.169369804+01:00"}
{"id":"ron_clanker-83","title":"Replace keyword-based intelligence classification with Claude API","description":"PROBLEM:\nCurrent intelligence classification uses basic keyword matching (intelligence_classifier.py):\n- Simple string matching: 'if word in text'\n- Regex for player names\n- Hardcoded keyword lists (HIGH_CONFIDENCE_WORDS, CRITICAL_KEYWORDS, etc.)\n- Brittle and misses nuanced intelligence\n\nSOLUTION:\nUse Anthropic Claude API for intelligent classification:\n- Structured outputs for player extraction\n- Confidence scoring based on actual language understanding\n- Severity assessment with reasoning\n- Better player name matching (handles nicknames, partial names)\n- Context-aware actionability decisions\n\nIMPLEMENTATION:\n1. Create new intelligence/llm_classifier.py\n2. Use Claude Sonnet for classification\n3. Structured prompt with examples\n4. Return same ClassifiedIntelligence dataclass for compatibility\n5. Add fallback to keyword-based if API fails\n6. Cache API results to reduce costs\n\nBENEFITS:\n- Understands 'Palmer could be a doubt' vs 'Palmer ruled out'\n- Handles complex sentences with multiple players\n- Better context understanding\n- More accurate confidence/severity scoring\n\nINTEGRATION:\n- Update Scout agent to use LLM classifier\n- Keep keyword classifier as fallback\n- Add API usage logging/cost tracking","status":"open","priority":0,"issue_type":"feature","created_at":"2025-10-23T12:51:38.36603483+01:00","updated_at":"2025-10-23T12:51:38.36603483+01:00"}
{"id":"ron_clanker-84","title":"Integrate Scout intelligence events into production decision-making","description":"PROBLEM:\nScout publishes intelligence events (INJURY_INTELLIGENCE, ROTATION_RISK, SUSPENSION_INTELLIGENCE) but production manager.py doesn't consume them.\n\nCURRENT STATE:\n✅ Scout gathers intelligence daily (03:00 via cron)\n✅ Scout publishes events via EventBus\n✅ Hugo (transfer_strategy.py) subscribes to intelligence events\n✅ Hugo has _handle_intelligence_alert() method\n❌ Production pre_deadline_selection.py uses synchronous manager.py\n❌ Intelligence events never reach actual team selection decisions\n\nTHE GAP:\nagents/manager.py is synchronous and doesn't subscribe to events. It calls:\n- DecisionSynthesisEngine for ML predictions\n- TransferOptimizer for transfers\n- ChipStrategyAnalyzer for chips\n\nBut it NEVER checks what Scout found!\n\nSOLUTION:\nIntegrate intelligence into decision flow:\n\nOPTION A (Quick Fix - Before ron_clanker-81):\n1. Add database query in manager.py to check recent intelligence\n2. Query decisions table for intelligence_detected entries from last 48h\n3. Pass intelligence to TransferOptimizer\n4. TransferOptimizer flags affected players for urgent transfer\n5. Display intelligence warnings in team announcement\n\nOPTION B (Proper Fix - After ron_clanker-81):\n1. Wait for event-driven manager consolidation\n2. Manager subscribes to intelligence events\n3. Caches intelligence alerts\n4. Uses them in decision synthesis\n\nRECOMMENDED: Start with Option A, migrate to Option B with ron_clanker-81\n\nACCEPTANCE CRITERIA:\n- Scout intelligence visible in pre_deadline_selection.py output\n- Transfer recommendations consider injury/rotation/suspension intelligence\n- Team announcement mentions intelligence: 'Scout reports Palmer injury - transferred out'\n- Intelligence stored and retrievable from database","status":"open","priority":0,"issue_type":"feature","created_at":"2025-10-23T12:52:01.377038789+01:00","updated_at":"2025-10-23T12:52:01.377038789+01:00","dependencies":[{"issue_id":"ron_clanker-84","depends_on_id":"ron_clanker-81","type":"blocks","created_at":"2025-10-23T12:53:01.584587077+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-85","title":"Phase 1: Add ML dependencies to manager_agent_v2.py","description":"Add DecisionSynthesisEngine, TransferOptimizer, and ChipStrategyAnalyzer to RonManager.\n\nWHAT TO ADD:\n1. Import statements:\n   - from agents.synthesis.engine import DecisionSynthesisEngine\n   - from agents.transfer_optimizer import TransferOptimizer\n   - from intelligence.chip_strategy import ChipStrategyAnalyzer\n\n2. Initialize in __init__():\n   - self.synthesis_engine = DecisionSynthesisEngine(database=self.db)\n   - self.chip_strategy = ChipStrategyAnalyzer(database=self.db, league_intel_service=None)\n   - self.transfer_optimizer = TransferOptimizer(database=self.db, chip_strategy=self.chip_strategy)\n\n3. Add use_ml flag for graceful fallback if ML unavailable\n\n4. Test imports work without errors\n\nACCEPTANCE:\n- RonManager can access synthesis_engine, transfer_optimizer, chip_strategy\n- No import errors\n- Maintains backward compatibility","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-23T13:07:12.353166372+01:00","updated_at":"2025-10-23T14:23:29.664766142+01:00","dependencies":[{"issue_id":"ron_clanker-85","depends_on_id":"ron_clanker-81","type":"blocks","created_at":"2025-10-23T13:09:00.781024771+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-86","title":"Phase 2: Port ML transfer logic to manager_agent_v2.py","description":"Port transfer decision logic from manager.py to RonManager.\n\nSOURCE METHODS (manager.py):\n- _decide_transfers_ml() (lines 578-701)\n- _decide_transfers_optimized() (lines 516-577) as fallback\n- _decide_transfers() (lines 913-944) basic fallback\n\nTARGET:\n- Create/enhance _decide_transfers() in manager_agent_v2.py\n- Use synthesis_engine for ML predictions\n- Use transfer_optimizer for multi-GW planning\n- Call chip_strategy for chip vs transfer comparison\n- Return transfer recommendations with reasoning\n\nFLOW:\n1. Try ML approach (synthesis_engine + transfer_optimizer)\n2. Fallback to optimized approach if ML fails\n3. Fallback to basic approach if optimization fails\n\nACCEPTANCE:\n- _decide_transfers() method exists in RonManager\n- Uses ML predictions when available\n- Returns transfer recommendations\n- Logs reasoning to database","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-23T13:07:27.762759692+01:00","updated_at":"2025-10-23T14:35:15.911351526+01:00","dependencies":[{"issue_id":"ron_clanker-86","depends_on_id":"ron_clanker-85","type":"blocks","created_at":"2025-10-23T13:08:46.137415152+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-86","depends_on_id":"ron_clanker-81","type":"blocks","created_at":"2025-10-23T13:09:01.095652059+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-87","title":"Phase 3: Port ML captain selection to manager_agent_v2.py","description":"Replace basic captain selection with ML-powered version.\n\nSOURCE: manager.py::_assign_captain_ml() (lines 702-771)\n\nTARGET: Replace manager_agent_v2.py::_select_captain()\n\nLOGIC:\n1. Get ML expected points from synthesis_engine\n2. Consider league position (aggressive vs defensive)\n3. Select captain = highest xP\n4. Select vice captain = second highest xP\n5. Ensure both are in starting XI (positions 1-11)\n6. Log captain reasoning\n\nACCEPTANCE:\n- _select_captain() uses ML predictions\n- Captain has highest expected points\n- Vice captain is second highest\n- Reasoning logged to decisions table\n- Falls back to value_score if ML unavailable","status":"in_progress","priority":0,"issue_type":"task","created_at":"2025-10-23T13:07:40.904933844+01:00","updated_at":"2025-10-23T14:35:19.070599782+01:00","dependencies":[{"issue_id":"ron_clanker-87","depends_on_id":"ron_clanker-85","type":"blocks","created_at":"2025-10-23T13:08:46.480112515+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-87","depends_on_id":"ron_clanker-81","type":"blocks","created_at":"2025-10-23T13:09:01.404030534+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-88","title":"Phase 4: Port chip strategy to manager_agent_v2.py","description":"Add chip usage decision logic to RonManager.\n\nSOURCE: manager.py::_decide_chip_usage_ml() (lines 880-903)\n\nTARGET: New method manager_agent_v2.py::_decide_chip_usage()\n\nLOGIC:\n1. Call chip_strategy.analyze_all_chips()\n2. Get chip recommendations with reasoning\n3. Compare chip EV vs transfer EV\n4. Decide: use chip OR make transfers\n5. Return chip recommendation or None\n\nINTEGRATION:\n- Called by weekly decision orchestration\n- Coordinates with transfer decisions\n- Publishes chip decision to events\n\nACCEPTANCE:\n- _decide_chip_usage() method exists\n- Uses ChipStrategyAnalyzer\n- Returns chip recommendation with reasoning\n- Coordinates with transfers (chip vs transfer comparison)","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-23T13:07:57.795933694+01:00","updated_at":"2025-10-23T13:07:57.795933694+01:00","dependencies":[{"issue_id":"ron_clanker-88","depends_on_id":"ron_clanker-85","type":"blocks","created_at":"2025-10-23T13:08:48.248326993+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-88","depends_on_id":"ron_clanker-81","type":"blocks","created_at":"2025-10-23T13:09:01.706861544+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-89","title":"Phase 5: Port weekly decision orchestration to manager_agent_v2.py","description":"Add weekly decision orchestration - the master control flow.\n\nSOURCE: manager.py::make_weekly_decision() (lines 372-514)\n\nTARGET: New method manager_agent_v2.py::make_weekly_decision()\n\nORCHESTRATION FLOW:\n1. Load current team from database\n2. Get cached value rankings (from events)\n3. Get cached intelligence (from Scout events)\n4. Run ML synthesis (DecisionSynthesisEngine)\n5. Decide transfers (TransferOptimizer)\n6. Decide captain (ML predictions)\n7. Decide chips (ChipStrategyAnalyzer)\n8. Optimize starting XI\n9. Generate team announcement\n10. Store in draft_team table\n11. Publish TEAM_SELECTED event\n12. Return team + announcement\n\nEVENT-DRIVEN CHANGES:\n- Listen for GAMEWEEK_PLANNING(trigger='6h')\n- Use cached data from previous events\n- Publish results as events\n- Async/await throughout\n\nACCEPTANCE:\n- make_weekly_decision() orchestrates all decisions\n- Uses event-driven pattern\n- Publishes TEAM_SELECTED event\n- Returns complete team + announcement\n- Logs all decisions to database","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-23T13:08:09.649252501+01:00","updated_at":"2025-10-23T13:08:09.649252501+01:00","dependencies":[{"issue_id":"ron_clanker-89","depends_on_id":"ron_clanker-86","type":"blocks","created_at":"2025-10-23T13:08:48.547500419+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-89","depends_on_id":"ron_clanker-87","type":"blocks","created_at":"2025-10-23T13:08:48.854953687+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-89","depends_on_id":"ron_clanker-88","type":"blocks","created_at":"2025-10-23T13:08:49.158020004+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-89","depends_on_id":"ron_clanker-81","type":"blocks","created_at":"2025-10-23T13:09:02.016363918+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-9","title":"Generate GW8 team announcement in Ron's voice","description":"First team announcement. Explain selection reasoning, DC strategy, captain choice. Set the tone for Ron's communication style.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T22:55:21.551845978+01:00","updated_at":"2025-10-16T23:59:54.653167306+01:00","closed_at":"2025-10-16T23:59:54.653167306+01:00","dependencies":[{"issue_id":"ron_clanker-9","depends_on_id":"ron_clanker-8","type":"blocks","created_at":"2025-10-16T22:56:50.274727897+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-9","depends_on_id":"ron_clanker-6","type":"blocks","created_at":"2025-10-16T22:56:52.736813306+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-90","title":"Phase 6: Update pre_deadline_selection.py to use RonManager","description":"Switch production deadline script from ManagerAgent to RonManager.\n\nCHANGES TO scripts/pre_deadline_selection.py:\n\n1. Import change:\n   - OLD: from agents.manager import ManagerAgent\n   - NEW: from agents.manager_agent_v2 import RonManager\n\n2. Initialization change:\n   - OLD: ron = ManagerAgent(database=db)\n   - NEW: ron = RonManager(database=db)\n\n3. Add async support:\n   - Wrap main logic in async function\n   - Use asyncio.run() for entry point\n   - await ron.make_weekly_decision()\n\n4. Event bus integration:\n   - Start EventBus if not running\n   - Allow event propagation\n   - Clean shutdown\n\nTESTING:\n- Dry run for GW9/GW10\n- Compare output to old manager.py\n- Verify all decisions match or improve\n- Check Slack/Telegram notifications work\n\nACCEPTANCE:\n- Script uses RonManager (event-driven)\n- All functionality preserved\n- No regressions\n- Ready for production","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-23T13:08:27.970336007+01:00","updated_at":"2025-10-23T13:08:27.970336007+01:00","dependencies":[{"issue_id":"ron_clanker-90","depends_on_id":"ron_clanker-89","type":"blocks","created_at":"2025-10-23T13:08:51.713369337+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-90","depends_on_id":"ron_clanker-81","type":"blocks","created_at":"2025-10-23T13:09:02.323391152+01:00","created_by":"jolyon"}]}
{"id":"ron_clanker-91","title":"Phase 7: Deprecate manager.py - archive as legacy","description":"Remove synchronous manager.py from active codebase.\n\nSTEPS:\n1. Rename agents/manager.py → agents/manager_legacy.py\n2. Update all remaining imports:\n   - Search codebase for 'from agents.manager import'\n   - Replace with 'from agents.manager_agent_v2 import RonManager'\n3. Update all ManagerAgent() calls to RonManager()\n4. Add deprecation notice to manager_legacy.py docstring\n5. Remove from active usage\n6. Update ARCHITECTURE.md\n\nSCRIPTS TO UPDATE:\n- Find all with: grep -r 'from agents.manager import' scripts/\n- Update each one\n- Test each one\n\nACCEPTANCE:\n- No active imports of agents.manager\n- All scripts use RonManager\n- manager_legacy.py archived with notice\n- Documentation updated\n- No regressions in functionality","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-23T13:08:38.566671289+01:00","updated_at":"2025-10-23T13:08:38.566671289+01:00","dependencies":[{"issue_id":"ron_clanker-91","depends_on_id":"ron_clanker-90","type":"blocks","created_at":"2025-10-23T13:08:53.521923095+01:00","created_by":"jolyon"},{"issue_id":"ron_clanker-91","depends_on_id":"ron_clanker-81","type":"blocks","created_at":"2025-10-23T13:09:05.617574495+01:00","created_by":"jolyon"}]}
